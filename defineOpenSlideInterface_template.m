% |*Define Missing Constructs*|
% |To define the missing constructs, click the link in the generateLibraryDefinition 
% output message to edit the definitions in defineOpenSlideInterface.mlx. For 
% information about editing this file and examples for specifying arguments, see| 
% <https://www.mathworks.com/help/matlab/matlab_external/define-missing-information-for-matlab-signatures.html 
% |Define Missing Information for MATLAB Signatures|>|.|
% 
% |To write a read-only Adapter for blockedArray the OpenSlide Interface should 
% contain necessary functions open and read the openslide object.|
% 
% |1. In the function openslide_open uncomment the statements defining it. To 
% define the "filename" argument, in this defineArgument statement, replace <MLTYPE> 
% with "string" and <SHAPE> of the "input" with "nullTerminated".|

% defineArgument(openslide_openDefinition, "filename", "string", "input", "nullTerminated", "Description", "filename The filename to open.");
% %% 
% % |In the statement defineOutput, replace the <SHAPE> of "RetVal" with 1. This 
% % denotes that the     openslide_open function returns only openslide object for 
% % an input Whole Slide Image.|
% 
% defineOutput(openslide_openDefinition, "RetVal", "clib.OpenSlideInterface.openslide_t", 1, "Description", "On success, a new OpenSlide object." + newline + ...
%    "If the file is not recognized by OpenSlide, NULL." + newline + ...
%    "If the file is recognized but an error occurred, an OpenSlide" + newline + ...
%    "object in error state.");
% %% 
% % |2. In the function openslide_get_level_count uncomment the statements defining 
% % it. Similar to the previous step, in the defineArgument statement, replace the 
% % <SHAPE> of the input to 1. Note that the "RetVal" for the defineOutput statement 
% % is already set by MATLAB to "int32".|
% 
% defineArgument(openslide_get_level_countDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
% defineOutput(openslide_get_level_countDefinition, "RetVal", "int32", "Description", "The number of levels, or -1 if an error occurred." + newline + ...
%    "@since 3.3.0");
% %% 
% % |3. The openslide_get_level_dimensions is used to obtain the width and height 
% % of the slide at any given level. In this function, under the defineArgument 
% % statements replace all the <SHAPE> value of the arguments "osr", "w" and "h" 
% % with 1 and change the| <https://www.mathworks.com/help/matlab/matlab_external/define-missing-information-for-matlab-signatures.html#mw_0a020a37-17a6-40cc-907b-a2c71229d43d 
% % |DIRECTION Parameter|> |of "input" in "w" and "h" to "inputoutput". This denotes 
% % that the pointer arguments are used to both pass and return data. Change the 
% % datatype of "w" and "h" to be "int64".|
% 
% defineArgument(openslide_get_level_dimensionsDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
% defineArgument(openslide_get_level_dimensionsDefinition, "level", "int32", "Description", "level The desired level.");
% defineArgument(openslide_get_level_dimensionsDefinition, "w", "int64", "inputoutput", 1, "Description", "[out] w The width of the image, or -1 if an error occurred" + newline + ...
%    "or the level was out of range."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
% defineArgument(openslide_get_level_dimensionsDefinition, "h", "int64", "inputoutput", 1, "Description", "[out] h The height of the image, or -1 if an error occurred" + newline + ...
%    "or the level was out of range." + newline + ...
%    "@since 3.3.0"); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
% %% 
% % |4. The openslide_get_level_downsample function returns the downsample value 
% % of each level which can be used to retrive a desired region from a particular 
% % level. In the defineArgument statement for "osr" change the <SHAPE> value to 
% % 1. By default, MATLAB already sets the "RetVal" of defineOutput statement to 
% % "double".|
% 
% defineArgument(openslide_get_level_downsampleDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
% defineArgument(openslide_get_level_downsampleDefinition, "level", "int32", "Description", "level The desired level.");
% defineOutput(openslide_get_level_downsampleDefinition, "RetVal", "double", "Description", "The downsampling factor for this level, or -1.0 if an error occurred" + newline + ...
%    "or the level was out of range." + newline + ...
%    "@since 3.3.0");
% %% 
% % |5. Search the definition file for openslide_read_region function and uncomment 
% % the statements defining it. This function can be used by the blockedArray Adapter 
% % to access a specified region in the Whole Slide Image.|
% % 
% % |In the defineArgument statement for "osr" change the <SHAPE> to 1 and in 
% % the defineArgument statement for "dest", the return value of this function, 
% % change the <SHAPE> to ["w","h"].|
% % 
% % |Note that the "dest" is defined a| <https://www.mathworks.com/help/matlab/ref/clibarray.html 
% % |clibArray|> |of type "UnsignedInt", matching the C++ function signature equivalent 
% % of "uint32" type.|
% 
% defineArgument(openslide_read_regionDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
% defineArgument(openslide_read_regionDefinition, "dest", "clib.array.OpenSlideInterface.UnsignedInt", "input", ["w", "h"], "Description", "dest The destination buffer for the ARGB data."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.UnsignedInt, or uint32
% defineArgument(openslide_read_regionDefinition, "x", "int64", "Description", "x The top left x-coordinate, in the level 0 reference frame.");
% defineArgument(openslide_read_regionDefinition, "y", "int64", "Description", "y The top left y-coordinate, in the level 0 reference frame.");
% defineArgument(openslide_read_regionDefinition, "level", "int32", "Description", "level The desired level.");
% defineArgument(openslide_read_regionDefinition, "w", "int64", "Description", "w The width of the region. Must be non-negative.");
% defineArgument(openslide_read_regionDefinition, "h", "int64", "Description", "h The height of the region. Must be non-negative.");
% %% 
% % |6. In the openslide_close function, uncomment the statements defining it 
% % and change the <SHAPE> value of the "osr" argument to 1. This function is used 
% % to release the openslide pointer from memory.|
% 
% defineArgument(openslide_closeDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
%
% %%
% % |7. In the functions, openslide_give_prefetch_hint_UNIMPLEMENTED and
% % openslide_cancel_prefetch_hint_UNIMPLEMENTED, comment out all the
% % lines to avoid the missing definitions error.

%% About defineOpenSlideInterface.mlx
% This file defines the MATLAB interface to the library |OpenSlideInterface|.
%
% Commented sections represent C++ functionality that MATLAB cannot automatically define. To include
% functionality, uncomment a section and provide values for &lt;SHAPE&gt;, &lt;DIRECTION&gt;, etc. For more
% information, see <matlab:helpview(fullfile(docroot,'matlab','helptargets.map'),'cpp_define_interface') Define MATLAB Interface for C++ Library>.



%% Setup. Do not edit this section.
function libDef = defineOpenSlideInterface()
libDef = clibgen.LibraryDefinition("OpenSlideInterfaceData.xml");
%% OutputFolder and Libraries 

OpenSlideInstall = 'OPENSLIDE_INSTALL_LOCATION';
OpenSlideInterface = 'OPENSLIDE_INTERFACE_LOCATION'; 

if ismac
    % Code to run on Mac platform
    libFile = 'libopenslide.dylib';
elseif isunix
    % Code to run on Linux platform
    libFile = 'libopenslide.so';
elseif ispc
    % Code to run on Windows platform
    libFile = 'libopenslide.lib';
end
libDef.OutputFolder = fullfile(OpenSlideInterface, 'osInterface');
libDef.Libraries = fullfile(OpenSlideInstall,'lib', libFile);

%% C++ class |_openslide| with MATLAB name |clib.OpenSlideInterface.openslide_t| 
openslide_tDefinition = addClass(libDef, "_openslide", "MATLABName", "clib.OpenSlideInterface.openslide_t", ...
    "Description", "clib.OpenSlideInterface.openslide_t    Representation of C++ class _openslide."); % Modify help description values as needed.

%% C++ function |openslide_detect_vendor| with MATLAB name |clib.OpenSlideInterface.openslide_detect_vendor|
% C++ Signature: char const * openslide_detect_vendor(char const * filename)
%openslide_detect_vendorDefinition = addFunction(libDef, ...
%    "char const * openslide_detect_vendor(char const * filename)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_detect_vendor", ...
%    "Description", "clib.OpenSlideInterface.openslide_detect_vendor    Representation of C++ function openslide_detect_vendor.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Quickly determine whether a whole slide image is recognized." + newline + ...
%    "" + newline + ...
%    "If OpenSlide recognizes the file referenced by @p filename, return a" + newline + ...
%    "string identifying the slide format vendor.  This is equivalent to the" + newline + ...
%    "value of the #OPENSLIDE_PROPERTY_NAME_VENDOR property.  Calling" + newline + ...
%    "openslide_open() on this file will return a valid OpenSlide object or" + newline + ...
%    "an OpenSlide object in error state." + newline + ...
%    "" + newline + ...
%    "Otherwise, return NULL.  Calling openslide_open() on this file will also" + newline + ...
%    "return NULL."); % Modify help description values as needed.
%defineArgument(openslide_detect_vendorDefinition, "filename", <MLTYPE>, "input", <SHAPE>, "Description", "filename The filename to check."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%defineOutput(openslide_detect_vendorDefinition, "RetVal", <MLTYPE>, <SHAPE>, "Description", "An identification of the format vendor for this file, or NULL." + newline + ...
%    "@since 3.4.0"); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%validate(openslide_detect_vendorDefinition);

%% C++ function |openslide_open| with MATLAB name |clib.OpenSlideInterface.openslide_open|
% C++ Signature: openslide_t * openslide_open(char const * filename)
openslide_openDefinition = addFunction(libDef, ...
   "openslide_t * openslide_open(char const * filename)", ...
   "MATLABName", "clib.OpenSlideInterface.openslide_open", ...
   "Description", "clib.OpenSlideInterface.openslide_open    Representation of C++ function openslide_open.", ...
   "DetailedDescription", "This content is from the external library documentation." + newline + ...
   "" + newline + ...
   "Open a whole slide image." + newline + ...
   "" + newline + ...
   "This function can be expensive; avoid calling it unnecessarily.  For" + newline + ...
   "example, a tile server should not call openslide_open() on every tile" + newline + ...
   "request.  Instead, it should maintain a cache of OpenSlide objects and" + newline + ...
   "reuse them when possible."); % Modify help description values as needed.
defineArgument(openslide_openDefinition, "filename", "string", "input", "nullTerminated", "Description", "filename The filename to open."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
defineOutput(openslide_openDefinition, "RetVal", "clib.OpenSlideInterface.openslide_t", 1, "Description", "On success, a new OpenSlide object." + newline + ...
   "If the file is not recognized by OpenSlide, NULL." + newline + ...
   "If the file is recognized but an error occurred, an OpenSlide" + newline + ...
   "object in error state.");
validate(openslide_openDefinition);

%% C++ function |openslide_get_level_count| with MATLAB name |clib.OpenSlideInterface.openslide_get_level_count|
% C++ Signature: int32_t openslide_get_level_count(openslide_t * osr)
openslide_get_level_countDefinition = addFunction(libDef, ...
   "int32_t openslide_get_level_count(openslide_t * osr)", ...
   "MATLABName", "clib.OpenSlideInterface.openslide_get_level_count", ...
   "Description", "clib.OpenSlideInterface.openslide_get_level_count    Representation of C++ function openslide_get_level_count.", ...
   "DetailedDescription", "This content is from the external library documentation." + newline + ...
   "" + newline + ...
   "Get the number of levels in the whole slide image."); % Modify help description values as needed.
defineArgument(openslide_get_level_countDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
defineOutput(openslide_get_level_countDefinition, "RetVal", "int32", "Description", "The number of levels, or -1 if an error occurred." + newline + ...
   "@since 3.3.0");
validate(openslide_get_level_countDefinition);

%% C++ function |openslide_get_level0_dimensions| with MATLAB name |clib.OpenSlideInterface.openslide_get_level0_dimensions|
% C++ Signature: void openslide_get_level0_dimensions(openslide_t * osr,int64_t * w,int64_t * h)
%openslide_get_level0_dimensionsDefinition = addFunction(libDef, ...
%    "void openslide_get_level0_dimensions(openslide_t * osr,int64_t * w,int64_t * h)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_level0_dimensions", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_level0_dimensions    Representation of C++ function openslide_get_level0_dimensions.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the dimensions of level 0 (the largest level). Exactly" + newline + ...
%    "equivalent to calling openslide_get_level_dimensions(osr, 0, w, h)."); % Modify help description values as needed.
%defineArgument(openslide_get_level0_dimensionsDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_level0_dimensionsDefinition, "w", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] w The width of the image, or -1 if an error occurred."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%defineArgument(openslide_get_level0_dimensionsDefinition, "h", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] h The height of the image, or -1 if an error occurred." + newline + ...
%    "@since 3.3.0"); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%validate(openslide_get_level0_dimensionsDefinition);

%% C++ function |openslide_get_level_dimensions| with MATLAB name |clib.OpenSlideInterface.openslide_get_level_dimensions|
% C++ Signature: void openslide_get_level_dimensions(openslide_t * osr,int32_t level,int64_t * w,int64_t * h)
openslide_get_level_dimensionsDefinition = addFunction(libDef, ...
   "void openslide_get_level_dimensions(openslide_t * osr,int32_t level,int64_t * w,int64_t * h)", ...
   "MATLABName", "clib.OpenSlideInterface.openslide_get_level_dimensions", ...
   "Description", "clib.OpenSlideInterface.openslide_get_level_dimensions    Representation of C++ function openslide_get_level_dimensions.", ...
   "DetailedDescription", "This content is from the external library documentation." + newline + ...
   "" + newline + ...
   "Get the dimensions of a level."); % Modify help description values as needed.
defineArgument(openslide_get_level_dimensionsDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
defineArgument(openslide_get_level_dimensionsDefinition, "level", "int32", "Description", "level The desired level.");
defineArgument(openslide_get_level_dimensionsDefinition, "w", "int64", "inputoutput", 1, "Description", "[out] w The width of the image, or -1 if an error occurred" + newline + ...
   "or the level was out of range."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
defineArgument(openslide_get_level_dimensionsDefinition, "h", "int64", "inputoutput", 1, "Description", "[out] h The height of the image, or -1 if an error occurred" + newline + ...
   "or the level was out of range." + newline + ...
   "@since 3.3.0"); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
validate(openslide_get_level_dimensionsDefinition);

%% C++ function |openslide_get_level_downsample| with MATLAB name |clib.OpenSlideInterface.openslide_get_level_downsample|
% C++ Signature: double openslide_get_level_downsample(openslide_t * osr,int32_t level)
openslide_get_level_downsampleDefinition = addFunction(libDef, ...
   "double openslide_get_level_downsample(openslide_t * osr,int32_t level)", ...
   "MATLABName", "clib.OpenSlideInterface.openslide_get_level_downsample", ...
   "Description", "clib.OpenSlideInterface.openslide_get_level_downsample    Representation of C++ function openslide_get_level_downsample.", ...
   "DetailedDescription", "This content is from the external library documentation." + newline + ...
   "" + newline + ...
   "Get the downsampling factor of a given level."); % Modify help description values as needed.
defineArgument(openslide_get_level_downsampleDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
defineArgument(openslide_get_level_downsampleDefinition, "level", "int32", "Description", "level The desired level.");
defineOutput(openslide_get_level_downsampleDefinition, "RetVal", "double", "Description", "The downsampling factor for this level, or -1.0 if an error occurred" + newline + ...
   "or the level was out of range." + newline + ...
   "@since 3.3.0");
validate(openslide_get_level_downsampleDefinition);

%% C++ function |openslide_get_best_level_for_downsample| with MATLAB name |clib.OpenSlideInterface.openslide_get_best_level_for_downsample|
% C++ Signature: int32_t openslide_get_best_level_for_downsample(openslide_t * osr,double downsample)
%openslide_get_best_level_for_downsampleDefinition = addFunction(libDef, ...
%    "int32_t openslide_get_best_level_for_downsample(openslide_t * osr,double downsample)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_best_level_for_downsample", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_best_level_for_downsample    Representation of C++ function openslide_get_best_level_for_downsample.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the best level to use for displaying the given downsample."); % Modify help description values as needed.
%defineArgument(openslide_get_best_level_for_downsampleDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_best_level_for_downsampleDefinition, "downsample", "double", "Description", "downsample The downsample factor.");
%defineOutput(openslide_get_best_level_for_downsampleDefinition, "RetVal", "int32", "Description", "The level identifier, or -1 if an error occurred." + newline + ...
%    "@since 3.3.0");
%validate(openslide_get_best_level_for_downsampleDefinition);

%% C++ function |openslide_read_region| with MATLAB name |clib.OpenSlideInterface.openslide_read_region|
% C++ Signature: void openslide_read_region(openslide_t * osr,uint32_t * dest,int64_t x,int64_t y,int32_t level,int64_t w,int64_t h)
openslide_read_regionDefinition = addFunction(libDef, ...
   "void openslide_read_region(openslide_t * osr,uint32_t * dest,int64_t x,int64_t y,int32_t level,int64_t w,int64_t h)", ...
   "MATLABName", "clib.OpenSlideInterface.openslide_read_region", ...
   "Description", "clib.OpenSlideInterface.openslide_read_region    Representation of C++ function openslide_read_region.", ...
   "DetailedDescription", "This content is from the external library documentation." + newline + ...
   "" + newline + ...
   "Copy pre-multiplied ARGB data from a whole slide image." + newline + ...
   "" + newline + ...
   "This function reads and decompresses a region of a whole slide" + newline + ...
   "image into the specified memory location. @p dest must be a valid" + newline + ...
   "pointer to enough memory to hold the region, at least (@p w @p h 4)" + newline + ...
   "bytes in length. If an error occurs or has occurred, then the memory" + newline + ...
   "pointed to by @p dest will be cleared."); % Modify help description values as needed.
defineArgument(openslide_read_regionDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
defineArgument(openslide_read_regionDefinition, "dest", "clib.array.OpenSlideInterface.UnsignedInt", "input", ["w", "h"], "Description", "dest The destination buffer for the ARGB data."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.UnsignedInt, or uint32
defineArgument(openslide_read_regionDefinition, "x", "int64", "Description", "x The top left x-coordinate, in the level 0 reference frame.");
defineArgument(openslide_read_regionDefinition, "y", "int64", "Description", "y The top left y-coordinate, in the level 0 reference frame.");
defineArgument(openslide_read_regionDefinition, "level", "int32", "Description", "level The desired level.");
defineArgument(openslide_read_regionDefinition, "w", "int64", "Description", "w The width of the region. Must be non-negative.");
defineArgument(openslide_read_regionDefinition, "h", "int64", "Description", "h The height of the region. Must be non-negative.");
validate(openslide_read_regionDefinition);

%% C++ function |openslide_close| with MATLAB name |clib.OpenSlideInterface.openslide_close|
% C++ Signature: void openslide_close(openslide_t * osr)
openslide_closeDefinition = addFunction(libDef, ...
   "void openslide_close(openslide_t * osr)", ...
   "MATLABName", "clib.OpenSlideInterface.openslide_close", ...
   "Description", "clib.OpenSlideInterface.openslide_close    Representation of C++ function openslide_close.", ...
   "DetailedDescription", "This content is from the external library documentation." + newline + ...
   "" + newline + ...
   "Close an OpenSlide object." + newline + ...
   "No other threads may be using the object." + newline + ...
   "After this call returns, the object cannot be used anymore."); % Modify help description values as needed.
defineArgument(openslide_closeDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", 1, "Description", "osr The OpenSlide object.");
validate(openslide_closeDefinition);

%% C++ function |openslide_get_error| with MATLAB name |clib.OpenSlideInterface.openslide_get_error|
% C++ Signature: char const * openslide_get_error(openslide_t * osr)
%openslide_get_errorDefinition = addFunction(libDef, ...
%    "char const * openslide_get_error(openslide_t * osr)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_error", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_error    Representation of C++ function openslide_get_error.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the current error string." + newline + ...
%    "" + newline + ...
%    "For a given OpenSlide object, once this function returns a non-NULL" + newline + ...
%    "value, the only useful operation on the object is to call" + newline + ...
%    "openslide_close() to free its resources."); % Modify help description values as needed.
%defineArgument(openslide_get_errorDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineOutput(openslide_get_errorDefinition, "RetVal", <MLTYPE>, <SHAPE>, "Description", "A string describing the original error that caused" + newline + ...
%    "the problem, or NULL if no error has occurred." + newline + ...
%    "@since 3.2.0"); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%validate(openslide_get_errorDefinition);

%% C++ function |openslide_get_property_value| with MATLAB name |clib.OpenSlideInterface.openslide_get_property_value|
% C++ Signature: char const * openslide_get_property_value(openslide_t * osr,char const * name)
%openslide_get_property_valueDefinition = addFunction(libDef, ...
%    "char const * openslide_get_property_value(openslide_t * osr,char const * name)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_property_value", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_property_value    Representation of C++ function openslide_get_property_value.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the value of a single property." + newline + ...
%    "" + newline + ...
%    "Certain vendor-specific metadata properties may exist" + newline + ...
%    "within a whole slide image. They are encoded as key-value" + newline + ...
%    "pairs. This call provides the value of the property given" + newline + ...
%    "by @p name."); % Modify help description values as needed.
%defineArgument(openslide_get_property_valueDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_property_valueDefinition, "name", <MLTYPE>, "input", <SHAPE>, "Description", "name The name of the desired property. Must be" + newline + ...
%    "a valid name as given by openslide_get_property_names()."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%defineOutput(openslide_get_property_valueDefinition, "RetVal", <MLTYPE>, <SHAPE>, "Description", "The value of the named property, or NULL if the property" + newline + ...
%    "doesn't exist or an error occurred."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%validate(openslide_get_property_valueDefinition);

%% C++ function |openslide_get_associated_image_dimensions| with MATLAB name |clib.OpenSlideInterface.openslide_get_associated_image_dimensions|
% C++ Signature: void openslide_get_associated_image_dimensions(openslide_t * osr,char const * name,int64_t * w,int64_t * h)
%openslide_get_associated_image_dimensionsDefinition = addFunction(libDef, ...
%    "void openslide_get_associated_image_dimensions(openslide_t * osr,char const * name,int64_t * w,int64_t * h)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_associated_image_dimensions", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_associated_image_dimensions    Representation of C++ function openslide_get_associated_image_dimensions.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the dimensions of an associated image." + newline + ...
%    "" + newline + ...
%    "This function returns the width and height of an associated image" + newline + ...
%    "associated with a whole slide image. Once the dimensions are known," + newline + ...
%    "use openslide_read_associated_image() to read the image."); % Modify help description values as needed.
%defineArgument(openslide_get_associated_image_dimensionsDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_associated_image_dimensionsDefinition, "name", <MLTYPE>, "input", <SHAPE>, "Description", "name The name of the desired associated image. Must be" + newline + ...
%    "a valid name as given by openslide_get_associated_image_names()."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%defineArgument(openslide_get_associated_image_dimensionsDefinition, "w", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] w The width of the associated image, or -1 if an error occurred."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%defineArgument(openslide_get_associated_image_dimensionsDefinition, "h", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] h The height of the associated image, or -1 if an error occurred."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%validate(openslide_get_associated_image_dimensionsDefinition);

%% C++ function |openslide_read_associated_image| with MATLAB name |clib.OpenSlideInterface.openslide_read_associated_image|
% C++ Signature: void openslide_read_associated_image(openslide_t * osr,char const * name,uint32_t * dest)
%openslide_read_associated_imageDefinition = addFunction(libDef, ...
%    "void openslide_read_associated_image(openslide_t * osr,char const * name,uint32_t * dest)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_read_associated_image", ...
%    "Description", "clib.OpenSlideInterface.openslide_read_associated_image    Representation of C++ function openslide_read_associated_image.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Copy pre-multiplied ARGB data from an associated image." + newline + ...
%    "" + newline + ...
%    "This function reads and decompresses an associated image associated" + newline + ...
%    "with a whole slide image. @p dest must be a valid pointer to enough" + newline + ...
%    "memory to hold the image, at least (width height 4) bytes in" + newline + ...
%    "length.  Get the width and height with" + newline + ...
%    "openslide_get_associated_image_dimensions(). This call does nothing" + newline + ...
%    "if an error occurred."); % Modify help description values as needed.
%defineArgument(openslide_read_associated_imageDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_read_associated_imageDefinition, "name", <MLTYPE>, "input", <SHAPE>, "Description", "dest The destination buffer for the ARGB data."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%defineArgument(openslide_read_associated_imageDefinition, "dest", "clib.array.OpenSlideInterface.UnsignedInt", "input", <SHAPE>, "Description", "name The name of the desired associated image. Must be" + newline + ...
%    "a valid name as given by openslide_get_associated_image_names()."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.UnsignedInt, or uint32
%validate(openslide_read_associated_imageDefinition);

%% C++ function |openslide_get_version| with MATLAB name |clib.OpenSlideInterface.openslide_get_version|
% C++ Signature: char const * openslide_get_version()
%openslide_get_versionDefinition = addFunction(libDef, ...
%    "char const * openslide_get_version()", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_version", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_version    Representation of C++ function openslide_get_version.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the version of the OpenSlide library."); % Modify help description values as needed.
%defineOutput(openslide_get_versionDefinition, "RetVal", <MLTYPE>, <SHAPE>, "Description", "A string describing the OpenSlide version." + newline + ...
%    "@since 3.3.0"); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%validate(openslide_get_versionDefinition);

%% C++ function |openslide_can_open| with MATLAB name |clib.OpenSlideInterface.openslide_can_open|
% C++ Signature: bool openslide_can_open(char const * filename)
%openslide_can_openDefinition = addFunction(libDef, ...
%    "bool openslide_can_open(char const * filename)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_can_open", ...
%    "Description", "clib.OpenSlideInterface.openslide_can_open    Representation of C++ function openslide_can_open.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Return whether openslide_open() will succeed." + newline + ...
%    "" + newline + ...
%    "This function returns @p true if openslide_open() will return a valid" + newline + ...
%    "@ref openslide_t, or @p false if it will return NULL or an" + newline + ...
%    "@ref openslide_t in error state.  As such, there's no reason to use it;" + newline + ...
%    "just call openslide_open().  For a less-expensive test that provides" + newline + ...
%    "weaker guarantees, see openslide_detect_vendor()." + newline + ...
%    "" + newline + ...
%    "Before version 3.4.0, this function could be slightly faster than calling" + newline + ...
%    "openslide_open(), but it could also erroneously return @p true in some" + newline + ...
%    "cases where openslide_open() would fail."); % Modify help description values as needed.
%defineArgument(openslide_can_openDefinition, "filename", <MLTYPE>, "input", <SHAPE>, "Description", "filename The filename to check."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%defineOutput(openslide_can_openDefinition, "RetVal", "logical", "Description", "If openslide_open() will succeed." + newline + ...
%    "@deprecated Use openslide_detect_vendor() to efficiently check whether" + newline + ...
%    "a slide file is recognized by OpenSlide, or just call" + newline + ...
%    "openslide_open().");
%validate(openslide_can_openDefinition);

%% C++ function |openslide_get_layer_count| with MATLAB name |clib.OpenSlideInterface.openslide_get_layer_count|
% C++ Signature: int32_t openslide_get_layer_count(openslide_t * osr)
%openslide_get_layer_countDefinition = addFunction(libDef, ...
%    "int32_t openslide_get_layer_count(openslide_t * osr)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_layer_count", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_layer_count    Representation of C++ function openslide_get_layer_count.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the number of levels in the whole slide image."); % Modify help description values as needed.
%defineArgument(openslide_get_layer_countDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineOutput(openslide_get_layer_countDefinition, "RetVal", "int32", "Description", "The number of levels, or -1 if an error occurred." + newline + ...
%    "@deprecated Use openslide_get_level_count() instead.");
%validate(openslide_get_layer_countDefinition);

%% C++ function |openslide_get_layer0_dimensions| with MATLAB name |clib.OpenSlideInterface.openslide_get_layer0_dimensions|
% C++ Signature: void openslide_get_layer0_dimensions(openslide_t * osr,int64_t * w,int64_t * h)
%openslide_get_layer0_dimensionsDefinition = addFunction(libDef, ...
%    "void openslide_get_layer0_dimensions(openslide_t * osr,int64_t * w,int64_t * h)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_layer0_dimensions", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_layer0_dimensions    Representation of C++ function openslide_get_layer0_dimensions.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the dimensions of level 0 (the largest level). Exactly" + newline + ...
%    "equivalent to calling openslide_get_level_dimensions(osr, 0, w, h)."); % Modify help description values as needed.
%defineArgument(openslide_get_layer0_dimensionsDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_layer0_dimensionsDefinition, "w", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] w The width of the image, or -1 if an error occurred."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%defineArgument(openslide_get_layer0_dimensionsDefinition, "h", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] h The height of the image, or -1 if an error occurred." + newline + ...
%    "@deprecated Use openslide_get_level0_dimensions() instead."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%validate(openslide_get_layer0_dimensionsDefinition);

%% C++ function |openslide_get_layer_dimensions| with MATLAB name |clib.OpenSlideInterface.openslide_get_layer_dimensions|
% C++ Signature: void openslide_get_layer_dimensions(openslide_t * osr,int32_t level,int64_t * w,int64_t * h)
%openslide_get_layer_dimensionsDefinition = addFunction(libDef, ...
%    "void openslide_get_layer_dimensions(openslide_t * osr,int32_t level,int64_t * w,int64_t * h)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_layer_dimensions", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_layer_dimensions    Representation of C++ function openslide_get_layer_dimensions.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the dimensions of a level."); % Modify help description values as needed.
%defineArgument(openslide_get_layer_dimensionsDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_layer_dimensionsDefinition, "level", "int32", "Description", "level The desired level.");
%defineArgument(openslide_get_layer_dimensionsDefinition, "w", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] w The width of the image, or -1 if an error occurred" + newline + ...
%    "or the level was out of range."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%defineArgument(openslide_get_layer_dimensionsDefinition, "h", "clib.array.OpenSlideInterface.LongLong", "input", <SHAPE>, "Description", "[out] h The height of the image, or -1 if an error occurred" + newline + ...
%    "or the level was out of range." + newline + ...
%    "@deprecated Use openslide_get_level_dimensions() instead."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.LongLong, or int64
%validate(openslide_get_layer_dimensionsDefinition);

%% C++ function |openslide_get_layer_downsample| with MATLAB name |clib.OpenSlideInterface.openslide_get_layer_downsample|
% C++ Signature: double openslide_get_layer_downsample(openslide_t * osr,int32_t level)
%openslide_get_layer_downsampleDefinition = addFunction(libDef, ...
%    "double openslide_get_layer_downsample(openslide_t * osr,int32_t level)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_layer_downsample", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_layer_downsample    Representation of C++ function openslide_get_layer_downsample.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the downsampling factor of a given level."); % Modify help description values as needed.
%defineArgument(openslide_get_layer_downsampleDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_layer_downsampleDefinition, "level", "int32", "Description", "level The desired level.");
%defineOutput(openslide_get_layer_downsampleDefinition, "RetVal", "double", "Description", "The downsampling factor for this level, or -1.0 if an error occurred" + newline + ...
%    "or the level was out of range." + newline + ...
%    "@deprecated Use openslide_get_level_downsample() instead.");
%validate(openslide_get_layer_downsampleDefinition);

%% C++ function |openslide_get_best_layer_for_downsample| with MATLAB name |clib.OpenSlideInterface.openslide_get_best_layer_for_downsample|
% C++ Signature: int32_t openslide_get_best_layer_for_downsample(openslide_t * osr,double downsample)
%openslide_get_best_layer_for_downsampleDefinition = addFunction(libDef, ...
%    "int32_t openslide_get_best_layer_for_downsample(openslide_t * osr,double downsample)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_best_layer_for_downsample", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_best_layer_for_downsample    Representation of C++ function openslide_get_best_layer_for_downsample.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the best level to use for displaying the given downsample."); % Modify help description values as needed.
%defineArgument(openslide_get_best_layer_for_downsampleDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineArgument(openslide_get_best_layer_for_downsampleDefinition, "downsample", "double", "Description", "downsample The downsample factor.");
%defineOutput(openslide_get_best_layer_for_downsampleDefinition, "RetVal", "int32", "Description", "The level identifier, or -1 if an error occurred." + newline + ...
%    "@deprecated Use openslide_get_best_level_for_downsample() instead.");
%validate(openslide_get_best_layer_for_downsampleDefinition);

%% C++ function |openslide_get_comment| with MATLAB name |clib.OpenSlideInterface.openslide_get_comment|
% C++ Signature: char const * openslide_get_comment(openslide_t * osr)
%openslide_get_commentDefinition = addFunction(libDef, ...
%    "char const * openslide_get_comment(openslide_t * osr)", ...
%    "MATLABName", "clib.OpenSlideInterface.openslide_get_comment", ...
%    "Description", "clib.OpenSlideInterface.openslide_get_comment    Representation of C++ function openslide_get_comment.", ...
%    "DetailedDescription", "This content is from the external library documentation." + newline + ...
%    "" + newline + ...
%    "Get the comment (if any) for this image. Exactly equivalent to calling" + newline + ...
%    "openslide_get_property_value() with #OPENSLIDE_PROPERTY_NAME_COMMENT."); % Modify help description values as needed.
%defineArgument(openslide_get_commentDefinition, "osr", "clib.OpenSlideInterface.openslide_t", "input", <SHAPE>, "Description", "osr The OpenSlide object.");
%defineOutput(openslide_get_commentDefinition, "RetVal", <MLTYPE>, <SHAPE>, "Description", "The comment for this image, or NULL if an error occurred." + newline + ...
%    "@deprecated Call openslide_get_property_value() with" + newline + ...
%    "#OPENSLIDE_PROPERTY_NAME_COMMENT instead."); % '<MLTYPE>' can be clib.array.OpenSlideInterface.Char,int8,string, or char
%validate(openslide_get_commentDefinition);

%% C++ function |_openslide_give_prefetch_hint_UNIMPLEMENTED| with MATLAB name |clib.OpenSlideInterface.x_openslide_give_prefetch_hint_UNIMPLEMENTED|
% C++ Signature: int _openslide_give_prefetch_hint_UNIMPLEMENTED()
% x_openslide_give_prefetch_hint_UNIMPLEMENTEDDefinition = addFunction(libDef, ...
%     "int _openslide_give_prefetch_hint_UNIMPLEMENTED()", ...
%     "MATLABName", "clib.OpenSlideInterface.x_openslide_give_prefetch_hint_UNIMPLEMENTED", ...
%     "Description", "clib.OpenSlideInterface.x_openslide_give_prefetch_hint_UNIMPLEMENTED    Representation of C++ function _openslide_give_prefetch_hint_UNIMPLEMENTED."); % Modify help description values as needed.
% defineOutput(x_openslide_give_prefetch_hint_UNIMPLEMENTEDDefinition, "RetVal", "int32");
% validate(x_openslide_give_prefetch_hint_UNIMPLEMENTEDDefinition);

%% C++ function |_openslide_cancel_prefetch_hint_UNIMPLEMENTED| with MATLAB name |clib.OpenSlideInterface.x_openslide_cancel_prefetch_hint_UNIMPLEMENTED|
% C++ Signature: void _openslide_cancel_prefetch_hint_UNIMPLEMENTED()
% x_openslide_cancel_prefetch_hint_UNIMPLEMENTEDDefinition = addFunction(libDef, ...
%     "void _openslide_cancel_prefetch_hint_UNIMPLEMENTED()", ...
%     "MATLABName", "clib.OpenSlideInterface.x_openslide_cancel_prefetch_hint_UNIMPLEMENTED", ...
%     "Description", "clib.OpenSlideInterface.x_openslide_cancel_prefetch_hint_UNIMPLEMENTED    Representation of C++ function _openslide_cancel_prefetch_hint_UNIMPLEMENTED."); % Modify help description values as needed.
% validate(x_openslide_cancel_prefetch_hint_UNIMPLEMENTEDDefinition);

%% Validate the library definition
validate(libDef);

end
